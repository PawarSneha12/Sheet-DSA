using Array
class Stack_imp_Array{
    public static void main(String[] args){
     stack s=new stack();
     s.push(10);
     s.push(1);
     s.push(10);
    
    s.pop();
    s.push(15);
     s.pop();
     s.pop();
    
     System.out.println(s.size());
    }
}
    class stack{
        int size=10;
        int[] arr=new int[size];
        int top=-1;
        void push(int x){
            if(top==size){
                System.out.println("Stack OverFlow");
                return;
            }
            top++;
            arr[top]=x;
        }
        int pop(){
            if(top==-1){
                System.out.println("Stack UnderFlow");
                return -1;
            }
            int x=arr[top];
            top--;
            return x;
        }
        int top(){
            return arr[top];
        }
        int size(){
            return top+1;
        }
    }


//using LL


class Stack{
private class sNode{
    int d;
    sNode next;
    sNode(int d){
        this.d=d;
        this.next=null;
    }
}
sNode top;
int size;
Stack(){
    this.top=null;
    size=0;
}
public void push(int x){
    sNode node=new sNode(x);
    node.next=top;
    top=node;
System.out.println("element Pushed");
size++;
}
public int pop(){
    if(top==null){
        return -1;
    }
    int d=top.d;
   top=top.next;
    return d;
}
public int size(){
    return size;
}
public boolean Isempty(){
return top==null;
}
public int top(){
    return top.d;
}
public void printStack(){
    sNode temp=top;
    while(temp!=null){
        System.out.print(temp.d+" -> ");
        temp=temp.next;
    }
}
}



//using queue

class stack{
    Queue<Integer> q=new LinkedList<>();
    void push(int x){
        q.add(x);
        for(int i=0;i<q.size()-1;i++){
            q.add(q.remove());
        }
    }
    int pop(){
        return q.remove();
    }
    int top(){
        return q.peek();
    }
    int size(){
        return q.size();
    }
}

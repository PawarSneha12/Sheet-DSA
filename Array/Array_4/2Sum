Problem Statement: Given an array of integers nums[] and an integer target, 
return indices of the two numbers such that their sum is equal to the target.

Input: nums = [2,7,11,15], target = 9
Output: [0,1]



import java.util.*;
public class Sum_2{
    public static void main(String[] args){
        int[]arr = {2,7,11,15};
        int target = 17;
        System.out.println(Sum_2_3(arr,target));
     }

     //O(n^2)
     
     
     static ArrayList<Integer> Sum_2(int[]arr,int target){
      ArrayList<Integer> ans =new ArrayList<Integer>();
        for(int i=0;i<arr.length;i++){
         for(int j=i+1;j<arr.length;j++){
    if(arr[i]+arr[j]==target){
      ans.add(i);
      ans.add(j);
  break;
    }
         }
        }
        return ans;} 

//Using two poiter (O(nlogn))


static ArrayList<Integer> Sum_2_2(int[]arr,int target){
      ArrayList<Integer> ans =new ArrayList<Integer>();
      int left=0;
      int right=arr.length-1;
      Arrays.sort(arr);
        while(left<right){     
        if(arr[left]+arr[right]==target){
         ans.add(left);
         ans.add(right);
         break;
        }
        else if(arr[left]+arr[right]>target){
         right--;
        }
else{
   left++;
}

}
return ans;
}

//Using HashMap O(n)


static ArrayList<Integer> Sum_2_3(int[]arr,int target){
 ArrayList<Integer> ans =new ArrayList<Integer>();
 HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
for(int i=0;i<arr.length;i++){
if(hm.containsKey(target-arr[i])){
   ans.add(i);
   ans.add(hm.get(target-arr[i]));
}
else{
   hm.put(arr[i],i);
}
}

return ans;}
}
